generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  provider      String?
  providerId    String?
  isVerified    Boolean    @default(false)
  accounts      Account[]
  sessions      Session[]
  examInfos     ExamInfo[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ExamInfo {
  id             String     @id @default(cuid())
  exam           String
  subject        String
  year           String
  totalQuestions Int
  userId         String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions      Question[]

  @@unique([exam, subject, year])
}

model Question {
  id            String   @id @default(cuid())
  question      String
  options       String[]
  correctAnswer Int?
  imageUrl      String?
  examId        String
  exam          ExamInfo @relation(fields: [examId], references: [id])

  @@index([examId])
}
